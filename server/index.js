/* === ORIGINAL (–≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º) ===
<–æ—Å—Ç–∞–≤–∏–ª –ø—É—Å—Ç—ã–º, —Ç.–∫. –≤—ã —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∏ –Ω–∏–∂–µ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ 1:1, –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ ADDED / UPDATED>
=== END ORIGINAL === */

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const mysql = require('mysql2/promise');
const axios = require('axios');

// === ADDED: –¥–ª—è Google + OTP + SMS
const nodemailer = require('nodemailer');
const { OAuth2Client } = require('google-auth-library');
const crypto = require('crypto');

// === ADDED: SMS (Twilio –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
const SMS_PROVIDER = (process.env.SMS_PROVIDER || '').toLowerCase();
let twilioClient = null;
if (SMS_PROVIDER === 'twilio') {
  try {
    const twilio = require('twilio');
    twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
  } catch (e) {
    console.warn('Twilio SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã. SMS –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
  }
}

const app = express();

// === CORS
const allowedOrigins = (process.env.CLIENT_ORIGIN || 'http://localhost:3000').split(',');
app.use(cors({
  origin: allowedOrigins,
  credentials: true,            // <-- –≤–∞–∂–Ω–æ –¥–ª—è cookie
}));
// === –ü–∞—Ä—Å–µ—Ä—ã
app.use(express.json());
app.use(cookieParser());

// === MySQL
const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  timezone: '+00:00'
});

const JWT_SECRET = process.env.JWT_SECRET || 'dev_jwt_secret';
const API_KEY = process.env.OPENROUTER_API_KEY;

console.log('API_KEY –∏–∑ .env:', API_KEY);

// === Middleware JWT ‚Üí req.user
async function authMiddleware(req, res, next) {
  const token = req.cookies.token;
  if (!token) { req.user = null; return next(); }
  try {
    const payload = jwt.verify(token, JWT_SECRET);
    const [rows] = await db.query(
      'SELECT id, first_name, last_name, username, phone, email FROM users WHERE id = ?',
      [payload.id]
    );
    req.user = rows.length ? rows[0] : null;
  } catch {
    req.user = null;
  }
  next();
}
app.use(authMiddleware);

/* ===================== helpers & schema ===================== */
function random6() { return Math.floor(100000 + Math.random() * 900000).toString(); }
function sha256(s) { return crypto.createHash('sha256').update(s).digest('hex'); }
function normalizePhone(raw) {
  if (!raw) return '';
  let p = String(raw).replace(/[^\d+]/g, '');
  if (!p.startsWith('+') && /^\d+$/.test(p)) p = '+' + p; // –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ E.164
  return p;
}

// —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è OTP
(async () => {
  try {
    await db.query(`
      CREATE TABLE IF NOT EXISTS email_otps (
        id INT AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL,
        code_hash VARCHAR(255) NOT NULL,
        expires_at DATETIME NOT NULL,
        created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        UNIQUE KEY uniq_email (email)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    `);
    await db.query(`
      CREATE TABLE IF NOT EXISTS phone_otps (
        id INT AUTO_INCREMENT PRIMARY KEY,
        phone VARCHAR(64) NOT NULL,
        code_hash VARCHAR(255) NOT NULL,
        expires_at DATETIME NOT NULL,
        created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        UNIQUE KEY uniq_phone (phone)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    `);
    console.log('‚úÖ email_otps / phone_otps tables ensured');
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã OTP:', e?.message || e);
  }
})();

// email
async function sendOtpEmail(to, code) {
  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || '587', 10),
    secure: process.env.SMTP_SECURE === 'true',
    auth: process.env.SMTP_USER ? { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS } : undefined
  });
  const from = process.env.SMTP_FROM || 'no-reply@example.com';
  const info = await transporter.sendMail({
    from, to,
    subject: '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    text: `–í–∞—à —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥: ${code}. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`,
    html: `<p>–í–∞—à —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥: <b>${code}</b></p><p>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 10 –º–∏–Ω—É—Ç.</p>`
  });
  console.log('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ:', info.messageId);
}

// SMS (Twilio)
async function sendOtpSms(to, code) {
  if (SMS_PROVIDER !== 'twilio') throw new Error('SMS_PROVIDER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (twilio)');
  if (!twilioClient) throw new Error('Twilio –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  const from = process.env.TWILIO_FROM;
  if (!from) throw new Error('TWILIO_FROM –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  const resp = await twilioClient.messages.create({
    from,
    to,
    body: `–í–∞—à –∫–æ–¥: ${code} (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç)`
  });
  console.log('üì≤ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', resp.sid);
}

async function verifyGoogleIdToken(idToken) {
  const clientId = process.env.GOOGLE_CLIENT_ID;
  if (!clientId) throw new Error('GOOGLE_CLIENT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  const client = new OAuth2Client(clientId);
  const ticket = await client.verifyIdToken({ idToken, audience: clientId });
  return ticket.getPayload();
}

async function findUserByEmail(email) {
  const [rows] = await db.query('SELECT * FROM users WHERE email = ? LIMIT 1', [email]);
  return rows?.[0] || null;
}
async function findUserByPhone(phone) {
  const [rows] = await db.query('SELECT * FROM users WHERE phone = ? LIMIT 1', [phone]);
  return rows?.[0] || null;
}

// username –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
async function ensureUniqueUsername(base) {
  let u = (base || 'user').toString().replace(/[^a-z0-9._-]/gi, '').toLowerCase();
  if (!u) u = 'user';
  let candidate = u, i = 0;
  while (true) {
    const [r] = await db.query('SELECT id FROM users WHERE username = ? LIMIT 1', [candidate]);
    if (!r.length) return candidate;
    i += 1;
    candidate = `${u}${i}`;
    if (i > 50) candidate = `${u}-${Date.now().toString().slice(-6)}`;
  }
}

// —Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞ –ø–æ email (–¥–ª—è Google)
async function createUserByEmail({ email, first_name, last_name }) {
  const base = (email || '').split('@')[0] || 'user';
  const username = await ensureUniqueUsername(base);
  const password_hash = '';
  const phone = '';
  const [res] = await db.query(
    `INSERT INTO users (first_name, last_name, username, password_hash, phone, email)
     VALUES (?, ?, ?, ?, ?, ?)`,
    [first_name || '', last_name || '', username, password_hash, phone, email]
  );
  return { id: res.insertId, email, first_name, last_name, username };
}
/* ===================== /helpers ===================== */

// === –í–ê–®–ò –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –†–û–£–¢–´ === (register / login username)
app.post('/api/register', async (req, res) => {
  try {
    const { firstName, lastName, username, password, phone, email } = req.body;
    if (!firstName || !lastName || !username || !password || !phone || !email) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
    }
    const [exists] = await db.query('SELECT id FROM users WHERE username = ? OR email = ?', [username, email]);
    if (exists.length) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });

    const password_hash = await bcrypt.hash(password, 10);
    const [result] = await db.query(
      `INSERT INTO users (first_name, last_name, username, password_hash, phone, email)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [firstName, lastName, username, password_hash, phone, email]
    );

    const userId = result.insertId;
    const token = jwt.sign({ id: userId, username }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });
    res.json({ success: true, user: { first_name: firstName, last_name: lastName, username, phone, email } });
  } catch (err) {
    console.error('Register error (–ø–æ–¥—Ä–æ–±–Ω–æ):', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.', detail: err.message });
  }
});

app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
  try {
    const [rows] = await db.query('SELECT * FROM users WHERE username = ? LIMIT 1', [username]);
    if (!rows.length) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.' });

    const user = rows[0];
    const match = await bcrypt.compare(password, user.password_hash);
    if (!match) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.' });

    const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });
    res.json({ success: true, user: { first_name: user.first_name, last_name: user.last_name, username: user.username, phone: user.phone, email: user.email } });
  } catch (err) {
    console.error('Login error:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
  }
});

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–≤—Ö–æ–¥ –ø–æ EMAIL (–±–µ–∑ –ª–æ–≥–∏–Ω–∞)
app.post('/api/register-email', async (req, res) => {
  try {
    let { firstName, lastName, password, phone, email } = req.body;

    if (!firstName || !lastName || !password || !phone || !email) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.' });
    }

    phone = normalizePhone(phone);

    const [emailExists] = await db.query('SELECT id FROM users WHERE email = ? LIMIT 1', [email]);
    if (emailExists.length) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });

    const [phoneExists] = await db.query('SELECT id FROM users WHERE phone = ? LIMIT 1', [phone]);
    if (phoneExists.length) return res.status(400).json({ error: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.' });

    const base = (email || '').split('@')[0] || 'user';
    const username = await ensureUniqueUsername(base);

    const password_hash = await bcrypt.hash(password, 10);

    const [result] = await db.query(
      `INSERT INTO users (first_name, last_name, username, password_hash, phone, email)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [firstName, lastName, username, password_hash, phone, email]
    );

    res.json({ ok: true, id: result.insertId });
  } catch (e) {
    console.error('register-email error:', e);
    res.status(500).json({ error: e?.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
  }
});

app.post('/api/login-email', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.' });

    const [rows] = await db.query('SELECT * FROM users WHERE email = ? LIMIT 1', [email]);
    const user = rows?.[0];
    if (!user) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' });

    const match = await bcrypt.compare(password, user.password_hash || '');
    if (!match) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' });

    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });
    res.json({ ok: true });
  } catch (e) {
    console.error('login-email error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.' });
  }
});

// === Google OAuth + 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ email
app.post('/api/auth/google/start', async (req, res) => {
  try {
    const { id_token } = req.body;
    if (!id_token) return res.status(400).json({ error: 'id_token is required' });
    const payload = await verifyGoogleIdToken(id_token);
    const email = payload.email;
    if (!email) return res.status(400).json({ error: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ' });

    const code = random6();
    const hash = sha256(code);
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);

    await db.query(
      `INSERT INTO email_otps (email, code_hash, expires_at)
       VALUES (?, ?, ?)
       ON DUPLICATE KEY UPDATE code_hash = VALUES(code_hash), expires_at = VALUES(expires_at), created_at = CURRENT_TIMESTAMP`,
      [email, hash, expiresAt]
    );

    await sendOtpEmail(email, code);
    res.json({ ok: true, email });
  } catch (e) {
    console.error('google/start error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Google –≤—Ö–æ–¥–∞' });
  }
});

app.post('/api/auth/google/verify', async (req, res) => {
  try {
    const { id_token, code } = req.body;
    if (!id_token || !code) return res.status(400).json({ error: 'id_token –∏ code –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });

    const payload = await verifyGoogleIdToken(id_token);
    const email = payload.email;
    if (!email) return res.status(400).json({ error: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ' });

    const [rows] = await db.query('SELECT * FROM email_otps WHERE email = ? LIMIT 1', [email]);
    const row = rows?.[0];
    if (!row) return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫' });
    if (new Date(row.expires_at).getTime() < Date.now()) return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç—ë–∫, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π' });
    if (sha256(code) !== row.code_hash) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });

    await db.query('DELETE FROM email_otps WHERE email = ?', [email]);

    let user = await findUserByEmail(email);
    if (!user) {
      user = await createUserByEmail({
        email,
        first_name: payload.given_name || '',
        last_name: payload.family_name || ''
      });
    }

    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });

    res.json({ ok: true, user: {
      id: user.id,
      email,
      first_name: user.first_name || payload.given_name || '',
      last_name: user.last_name || payload.family_name || '',
      username: user.username
    }});
  } catch (e) {
    console.error('google/verify error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞' });
  }
});

/* ===================== –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ + –≤—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–∞—Ä–æ–ª—å) ===================== */
app.post('/api/me/update-phone', async (req, res) => {
  try {
    if (!req.user) return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

    let { phone, password } = req.body || {};
    if (!phone) return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });

    phone = normalizePhone(phone);

    const [exists] = await db.query('SELECT id FROM users WHERE phone = ? AND id <> ? LIMIT 1', [phone, req.user.id]);
    if (exists.length) return res.status(400).json({ error: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É' });

    if (password && password.length < 6) {
      return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    if (password) {
      const password_hash = await bcrypt.hash(password, 10);
      await db.query('UPDATE users SET phone = ?, password_hash = ? WHERE id = ?', [phone, password_hash, req.user.id]);
    } else {
      await db.query('UPDATE users SET phone = ? WHERE id = ?', [phone, req.user.id]);
    }

    res.json({ ok: true, phone });
  } catch (e) {
    console.error('update-phone error:', e);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä' });
  }
});

app.post('/api/login-phone', async (req, res) => {
  try {
    let { phone, password } = req.body || {};
    if (!phone || !password) return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å' });

    phone = normalizePhone(phone);
    const [rows] = await db.query('SELECT * FROM users WHERE phone = ? LIMIT 1', [phone]);
    const user = rows?.[0];
    if (!user) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

    const match = await bcrypt.compare(password, user.password_hash || '');
    if (!match) return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });
    res.json({ ok: true });
  } catch (e) {
    console.error('login-phone error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É' });
  }
});

/* ===================== ADDED: –í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ SMS-–∫–æ–¥ ===================== */
/** –°—Ç–∞—Ä—Ç: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç phone, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ SMS */
app.post('/api/auth/phone/start', async (req, res) => {
  try {
    let { phone } = req.body || {};
    phone = normalizePhone(phone);
    if (!phone) return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });

    // –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    const user = await findUserByPhone(phone);
    if (!user) return res.status(404).json({ error: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É' });

    // –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω—Ç–∏-—Å–ø–∞–º: 1 –∫–æ–¥ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
    const [last] = await db.query('SELECT created_at FROM phone_otps WHERE phone=?', [phone]);
    if (last.length) {
      const lastTs = new Date(last[0].created_at).getTime();
      if (Date.now() - lastTs < 30 * 1000) {
        return res.status(429).json({ error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥' });
      }
    }

    const code = random6();
    const hash = sha256(code);
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);

    await db.query(
      `INSERT INTO phone_otps (phone, code_hash, expires_at)
       VALUES (?, ?, ?)
       ON DUPLICATE KEY UPDATE code_hash = VALUES(code_hash), expires_at = VALUES(expires_at), created_at = CURRENT_TIMESTAMP`,
      [phone, hash, expiresAt]
    );

    await sendOtpSms(phone, code);
    res.json({ ok: true, phone });
  } catch (e) {
    console.error('phone/start error:', e);
    res.status(500).json({ error: e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS' });
  }
});

/** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç phone + code, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏–Ω–∏—Ç */
app.post('/api/auth/phone/verify', async (req, res) => {
  try {
    let { phone, code } = req.body || {};
    phone = normalizePhone(phone);
    if (!phone || !code) return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–¥' });

    const [rows] = await db.query('SELECT * FROM phone_otps WHERE phone = ? LIMIT 1', [phone]);
    const row = rows?.[0];
    if (!row) return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫' });
    if (new Date(row.expires_at).getTime() < Date.now()) {
      return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç—ë–∫, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π' });
    }
    if (sha256(code) !== row.code_hash) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
    }

    await db.query('DELETE FROM phone_otps WHERE phone = ?', [phone]);

    const user = await findUserByPhone(phone);
    if (!user) return res.status(404).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.cookie('token', token, { httpOnly: true, sameSite: 'lax', maxAge: 7 * 24 * 60 * 60 * 1000 });

    res.json({ ok: true });
  } catch (e) {
    console.error('phone/verify error:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞' });
  }
});

/* ===================== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–±–µ–∑ username) ===================== */
app.post('/api/me/update-profile', async (req, res) => {
  try {
    if (!req.user) return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    let { first_name, last_name, email } = req.body || {};
    first_name = (first_name || '').trim();
    last_name  = (last_name  || '').trim();
    email      = (email      || '').trim();

    if (!first_name || !last_name || !email) {
      return res.status(400).json({ error: '–ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    const [exists] = await db.query('SELECT id FROM users WHERE email = ? AND id <> ? LIMIT 1', [email, req.user.id]);
    if (exists.length) return res.status(400).json({ error: '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });

    await db.query('UPDATE users SET first_name=?, last_name=?, email=? WHERE id=?', [first_name, last_name, email, req.user.id]);

    const [rows] = await db.query('SELECT id, first_name, last_name, phone, email FROM users WHERE id = ? LIMIT 1', [req.user.id]);
    res.json({ ok: true, user: rows?.[0] || null });
  } catch (e) {
    console.error('update-profile error:', e);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' });
  }
});

// === me / logout / chat (–∫–∞–∫ –±—ã–ª–æ)
app.get('/api/me', (req, res) => {
  if (!req.user) return res.json({ user: null });
  res.json({ user: req.user });
});

app.post('/api/logout', (req, res) => {
  res.clearCookie('token');
  res.json({ success: true });
});

app.post('/api/chat', async (req, res) => {
  const userMessage = req.body.message;
  try {
    let systemContext = '–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É.';
    if (req.user) systemContext += ` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username}, email: ${req.user.email}.`;

    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'mistralai/mistral-7b-instruct:free',
        messages: [
          { role: 'system', content: systemContext },
          { role: 'user', content: userMessage }
        ],
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'http://localhost:3000',
          'X-Title': 'MyShop Assistant'
        }
      }
    );

    const aiReply = response.data.choices[0].message.content;
    res.json({ reply: aiReply });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenRouter:', error.response?.data || error.message);
    res.status(500).json({ reply: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ò–ò üò¢' });
  }
});

// === –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 5050;
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`);
});
