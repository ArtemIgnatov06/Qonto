// client/src/components/ChatWidget.jsx
import React, { useState, useRef, useEffect, useCallback } from 'react';
import axios from 'axios';
import '../App.css';

const TypingIndicator = () => (
  <div className="message message-ai typing-indicator">
    <span className="dot" />
    <span className="dot" />
    <span className="dot" />
  </div>
);

export default function ChatWidget() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesRef = useRef(null);
  const bottomRef = useRef(null);

  const scrollToBottom = useCallback(() => {
    // –ø–ª–∞–≤–Ω–æ –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }, []);

  // –ö–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–∏–¥–∂–µ—Ç ‚Äî –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
  useEffect(() => {
    if (open) {
      // –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∏–º, —á—Ç–æ–±—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª–æ—Å—å
      setTimeout(scrollToBottom, 50);
    }
  }, [open, scrollToBottom]);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping, scrollToBottom]);

  const sendMessage = async () => {
    if (!input.trim()) return;
    const userMessage = input;
    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setInput('');
    setIsTyping(true);

    try {
      const res = await axios.post('http://localhost:5050/api/chat', { message: userMessage });
      // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–º–µ—Ç–Ω–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      // await new Promise(r => setTimeout(r, 300));
      setMessages(prev => [
        ...prev,
        { role: 'ai', content: res.data.reply },
      ]);
    } catch (err) {
      setMessages(prev => [...prev, { role: 'ai', content: '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò üòû' }]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  };

  return (
    <div className="chat-widget">
      {open ? (
        <div className="chat-box">
          <div className="chat-header">
            <div>–ß–∞—Ç —Å –ò–ò</div>
            <button
              className="close-button"
              onClick={() => setOpen(false)}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              ‚úï
            </button>
          </div>
          <div
            className="chat-messages"
            ref={messagesRef}
            style={{ overflowY: 'auto', flexGrow: 1, padding: '8px 12px' }}
          >
            {messages.map((m, i) => (
              <div
                key={i}
                className={`message ${m.role === 'user' ? 'message-user' : 'message-ai'}`}
              >
                {m.content}
              </div>
            ))}
            {isTyping && <TypingIndicator />}
            <div ref={bottomRef} />
          </div>
          <div className="chat-input-area" style={{ display: 'flex', gap: 8, padding: '8px 12px' }}>
            <input
              type="text"
              className="chat-input"
              placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              style={{ flexGrow: 1 }}
              disabled={isTyping}
            />
            <button
              className="button send-button"
              onClick={sendMessage}
              disabled={isTyping}
              style={{ minWidth: 80 }}
            >
              {isTyping ? '...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </div>
      ) : (
        <button className="button open-widget" onClick={() => setOpen(true)}>
          –ß–∞—Çüí¨
        </button>
      )}
    </div>
  );
}
